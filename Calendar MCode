let
  #"=== INPUTS ===" = "",
  StartDate = #date(MinStayYear, 1, 1),
  EndDate = #date(MinStayYear+9, 1, 1),
  #"============" = EndDate,
  ListDates = List.Dates(StartDate, Duration.Days(EndDate - StartDate) + 1,#duration(1,0,0,0)),
  #"Converted to Table" = Table.FromList(ListDates, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
  #"Renamed Columns as Date" = Table.RenameColumns(#"Converted to Table", {{"Column1", "Date"}}),
  #"=== YEAR COLUMNS ===" = #"Renamed Columns as Date",
  #"Inserted Year" = Table.AddColumn(#"=== YEAR COLUMNS ===", "Year", each Date.Year([Date]), Int64.Type),
  #"Added Year (Text)" = Table.AddColumn(#"Inserted Year", "Year (Text)", each Text.From([Year]), type text),
  #"Inserted Start of Year" = Table.AddColumn(#"Added Year (Text)", "Start of Year", each Date.StartOfYear([Date]), type date),
  #"Inserted End of Year" = Table.AddColumn(#"Inserted Start of Year", "End of Year", each Date.EndOfYear([Start of Year]), type date),
  #"=== QUARTER COLUMNS ===" = #"Inserted End of Year",
  #"Inserted Quarter" = Table.AddColumn(#"=== QUARTER COLUMNS ===", "Quarter", each Date.QuarterOfYear([Date]), Int64.Type),
  #"Quarter (Text)" = Table.AddColumn(#"Inserted Quarter", "Quarter (Text)", each "Q" & Text.From([Quarter]), type text),
  #"Inserted Start of Quarter" = Table.AddColumn(#"Quarter (Text)", "Start of Quarter", each Date.StartOfQuarter([Date]), type date),
  #"Inserted End of Quarter" = Table.AddColumn(#"Inserted Start of Quarter", "End of Quarter", each Date.EndOfQuarter([Date]), type date),
  #"=== MONTH COLUMNS ===" = #"Inserted End of Quarter",
  #"Inserted Month" = Table.AddColumn(#"=== MONTH COLUMNS ===", "Month", each Date.Month([Date]), Int64.Type),
  #"Inserted Month Name" = Table.AddColumn(#"Inserted Month", "Month Name", each Date.MonthName([Date], "en-US"), type text),
  #"Inserted first characters" = Table.AddColumn(#"Inserted Month Name", "Month Short Name", each Text.Start([Month Name], 3), type text),
  #"Inserted Days in Month" = Table.AddColumn(#"Inserted first characters", "Days in Month", each Date.DaysInMonth([Date]), Int64.Type),
  #"Inserted Start of Month" = Table.AddColumn(#"Inserted Days in Month", "Start of Month", each Date.StartOfMonth([Date]), type date),
  #"Inserted End of Month" = Table.AddColumn(#"Inserted Start of Month", "End of Month", each Date.EndOfMonth([Start of Month]), type date),
  #"=== WEEK COLUMNS ===" = #"Inserted End of Month",
  #"Inserted Week of Year" = Table.AddColumn(#"=== WEEK COLUMNS ===", "Week of Year", each Date.WeekOfYear([Date]), Int64.Type),
  #"Inserted Week of Month" = Table.AddColumn(#"Inserted Week of Year", "Week of Month", each Date.WeekOfMonth([Date]), Int64.Type),
  #"Inserted Start of Week" = Table.AddColumn(#"Inserted Week of Month", "Start of Week", each Date.StartOfWeek([Date]), type date),
  #"Inserted End of Week" = Table.AddColumn(#"Inserted Start of Week", "End of Week", each Date.EndOfWeek([Date]), type date),
  #"=== DAY COLUMNS ===" = #"Inserted End of Week",
  #"Inserted Day of Year" = Table.AddColumn(#"=== DAY COLUMNS ===", "Day of Year", each Date.DayOfYear([Date]), Int64.Type),
  #"Inserted Day of Month" = Table.AddColumn(#"Inserted Day of Year", "Day", each Date.Day([Date]), Int64.Type),
  #"Inserted Day of Week" = Table.AddColumn(#"Inserted Day of Month", "Day of Week", each Date.DayOfWeek([Date]), Int64.Type),
  #"Inserted Day Name" = Table.AddColumn(#"Inserted Day of Week", "Day Name", each Date.DayOfWeekName([Date], "en-US"), type text),
  #"Changed Type" = Table.TransformColumnTypes(#"Inserted Day Name", {{"Date", type date}, {"Year", Int64.Type}, {"Start of Year", type date}, {"End of Year", type date}, {"Quarter", Int64.Type}, {"Start of Quarter", type date}, {"End of Quarter", type date}, {"Month", Int64.Type}, {"Month Name", type text}, {"Days in Month", Int64.Type}, {"Start of Month", type date}, {"End of Month", type date}, {"Week of Year", Int64.Type}, {"Week of Month", Int64.Type}, {"Start of Week", type date}, {"End of Week", type date}, {"Day of Year", Int64.Type}, {"Day", Int64.Type}, {"Day of Week", Int64.Type}, {"Day Name", type text}}),
  #"=== COMBINATIONS ===" = #"Changed Type",
  #"Year & Quarter" = Table.AddColumn(#"=== COMBINATIONS ===", "Year & Quarter", each Text.Combine({Text.From([Year], "pt-BR"), Text.From([Quarter], "pt-BR")}, " Q"), type text),
  #"Year & Quarter (Sort)" = Table.AddColumn(#"Year & Quarter", "Year & Quarter (Sort)", each [Year]*100 + [Quarter]),
  #"Year & Month" = Table.AddColumn(#"Year & Quarter (Sort)", "Year & Month", each Text.Combine({Text.From([Year], "pt-BR"), Text.From([Month], "pt-BR")}, " M"), type text),
  #"Year & Month Name" = Table.AddColumn(#"Year & Month", "Year & Month Name", each Text.Combine({Text.From([Year], "pt-BR"), [Month Name]}, " "), type text),
  #"Month Name & Year" = Table.AddColumn(#"Year & Month Name", "Month Name & Year", each Text.Combine({[Month Name], Text.From([Year], "pt-BR")}, " "), type text),
  #"Year & Month (Sort)" = Table.AddColumn(#"Month Name & Year", "Year & Month (Sort)", each [Year]*100 + [Month]),
  #"Year & Week" = Table.AddColumn(#"Year & Month (Sort)", "Year & Week", each Text.Combine({Text.From([Year], "pt-BR"), Text.From([Week of Year], "pt-BR")}, " W"), type text),
  #"Year & Week (Sort)" = Table.AddColumn(#"Year & Week", "Year & Week (Sort)", each [Year]*100 + [Week of Year]),
  #"=== CURRENT & PREV ===" = #"Year & Week (Sort)",
  #"Current Day (Today) Flag" = Table.AddColumn(#"=== CURRENT & PREV ===", "Current Day (Today) Flag", each [Date] = Date.From(DateTime.LocalNow())),
  #"Current Week Flag" = Table.AddColumn(#"Current Day (Today) Flag", "Current Week Flag", each Date.EndOfWeek([Date]) = Date.EndOfWeek(Date.From(DateTime.LocalNow()),Day.Sunday)),
  #"Current Month Flag" = Table.AddColumn(#"Current Week Flag", "Current Month Flag", each Date.EndOfMonth([Date]) = Date.EndOfMonth(Date.From(DateTime.LocalNow()))),
  #"Current Year Flag" = Table.AddColumn(#"Current Month Flag", "Current Year Flag", each Date.EndOfYear([Date]) = Date.EndOfYear(Date.From(DateTime.LocalNow()))),
  #"Previous Day (Yesterday) Flag" = Table.AddColumn(#"Current Year Flag", "Previous Day (Yesterday) Flag", each [Date] = Date.AddDays(Date.From(DateTime.LocalNow()),-1)),
  #"Previous Week Flag" = Table.AddColumn(#"Previous Day (Yesterday) Flag", "Previous Week Flag", each Date.EndOfWeek([Date]) = Date.EndOfWeek(Date.AddWeeks(Date.From(DateTime.LocalNow()),-1),Day.Sunday)),
  #"Previous Month Flag" = Table.AddColumn(#"Previous Week Flag", "Previous Month Flag", each Date.EndOfMonth([Date]) = Date.EndOfMonth(Date.AddMonths(Date.From(DateTime.LocalNow()),-1))),
  #"Previous Year Flag" = Table.AddColumn(#"Previous Month Flag", "Previous Year Flag", each Date.EndOfYear([Date]) = Date.EndOfYear(Date.AddYears(Date.From(DateTime.LocalNow()),-1))),
  #"=== UNTIL CURRENT PERIODS ===" = #"Previous Year Flag",
  #"Until Current Day (Today) Flag" = Table.AddColumn(#"=== UNTIL CURRENT PERIODS ===", "Until Current Day (Today) Flag", each [Date] <= Date.From(DateTime.LocalNow())),
  #"Until Current Week Flag" = Table.AddColumn(#"Until Current Day (Today) Flag", "Until Current Week Flag", each Date.EndOfWeek([Date]) <= Date.EndOfWeek(Date.From(DateTime.LocalNow()),Day.Sunday)),
  #"Until Current Month Flag" = Table.AddColumn(#"Until Current Week Flag", "Until Current Month Flag", each Date.EndOfMonth([Date]) <= Date.EndOfMonth(Date.From(DateTime.LocalNow()))),
  #"Until Current Year Flag" = Table.AddColumn(#"Until Current Month Flag", "Until Current Year Flag", each Date.EndOfYear([Date]) <= Date.EndOfYear(Date.From(DateTime.LocalNow()))),
  #"=== UNTIL PAST PERIODS ===" = #"Until Current Year Flag",
  #"Until Previous Day (Yesterday) Flag" = Table.AddColumn(#"=== UNTIL PAST PERIODS ===", "Until Previous Day (Yesterday) Flag", each [Date] < Date.From(DateTime.LocalNow())),
  #"Until Previous Week Flag" = Table.AddColumn(#"Until Previous Day (Yesterday) Flag", "Until Previous Week Flag", each Date.EndOfWeek([Date]) < Date.EndOfWeek(Date.From(DateTime.LocalNow()),Day.Sunday)),
  #"Until Previous Month Flag" = Table.AddColumn(#"Until Previous Week Flag", "Until Previous Month Flag", each Date.EndOfMonth([Date]) < Date.EndOfMonth(Date.From(DateTime.LocalNow()))),
  #"Until Previous Year Flag" = Table.AddColumn(#"Until Previous Month Flag", "Until Previous Year Flag", each Date.EndOfYear([Date]) < Date.EndOfYear(Date.From(DateTime.LocalNow()))),
  #"Until 30 days next" = Table.AddColumn(#"Until Previous Year Flag", "Until 30 days next", each [Date] <= Date.AddDays(Date.From(DateTime.LocalNow()), 30)),
  #"Transform columns" = Table.TransformColumnTypes(#"Until 30 days next", {{"Year & Quarter (Sort)", type text}, {"Year & Month (Sort)", type text}, {"Year & Week (Sort)", type text}, {"Current Day (Today) Flag", type text}, {"Current Week Flag", type text}, {"Current Month Flag", type text}, {"Current Year Flag", type text}, {"Previous Day (Yesterday) Flag", type text}, {"Previous Week Flag", type text}, {"Previous Month Flag", type text}, {"Previous Year Flag", type text}, {"Until Current Year Flag", type text}, {"Until Current Month Flag", type text}, {"Until Current Week Flag", type text}, {"Until Current Day (Today) Flag", type text}, {"Until Previous Day (Yesterday) Flag", type text}, {"Until Previous Week Flag", type text}, {"Until Previous Month Flag", type text}, {"Until Previous Year Flag", type text}, {"Until 30 days next", type text}}),
  #"Transformar colunas" = Table.TransformColumnTypes(#"Transform columns", {{"Until 30 days next", type text}}),
  #"Substituir erros" = Table.ReplaceErrorValues(#"Transformar colunas", {{"Until 30 days next", null}})
in
  #"Substituir erros"
